---
title: "images for spp_chi fig"
format: 
  html:
    embed-resources: true
editor: visual
execute:
  warning: false
  message: false
---

# Summary

The summary figure for the spp chi paper methods needs a few images to represent rasters during the processing phase:

-   four or five examples of species distributions (presence/absence)
-   three or so examples of stressor distributions (continuous 0 - 1)

For each species, we will need a species-level impact map; each species will have some vector of vulnerability scores that will be represented by little gauges, so each stressor should get a different weight.

We need a single map of species-equal-weighted CHI that takes the average CHI across all spp, and another that weights the maps based on FE membership.

All these maps should be gridded about 8 or 10 square, and the images then skewed/distorted in such a way to make them look 3D-ish. Using the `magick` package, examine the `transform()` functions like `image_shear`.

```{r}
library(tidyverse)
library(here)
library(readxl)
library(terra)
library(magick)

```

# Methods

## Generate some species and stressor rasters

Some fake rasters were generated in Excel for 4 species and 3 stressors. Read these in!

```{r}
lyrs <- readxl::excel_sheets(here('data/fake_rasts.xlsx'))
df_stack <- lapply(lyrs, FUN = function(l) {
  ### l <- lyrs[1]
  x <- read_excel( here('data/fake_rasts.xlsx'), sheet = l, col_names = FALSE) %>%
    setNames(1:10) %>%
    mutate(y = 1:10) %>%
    pivot_longer(-y, values_to = 'val', names_to = 'x') %>%
    mutate(x = as.numeric(x))
}) %>% setNames(lyrs) %>%
  bind_rows(.id = 'layer')
```

Plot these as tiles with borders. For species, use a darker blue/lighter grey color scheme for presence/absence. For stressors, try a Viridis color scale?

```{r}
spp_layers <- lyrs[1:4]

for(l in lyrs[1:4]) {
  ### l <- lyrs[1]
  l_df <- df_stack %>%
    filter(layer == l) %>%
    mutate(val = factor(val))
  
  fill_cols <- c('grey96', ifelse(l == 'spp1', '#440000', 'slateblue'))
  
  p <- ggplot(l_df, aes(x, y)) +
    geom_tile(aes(fill = val), color = 'grey30', linewidth = .75, show.legend = FALSE) +
    scale_fill_manual(values = fill_cols) +
    coord_equal() +
    theme_void()
  
  print(p)
  
  ggsave(here('rasts_raw', sprintf('rast_%s.png', l)), height = 3, width = 3, dpi = 300)
}
```

```{r}
str_layers <- lyrs[5:7]
for(l in str_layers) {
  ### l <- lyrs[5]
  l_df <- df_stack %>%
    filter(layer == l)
  
  p <- ggplot(l_df, aes(x, y)) +
    geom_tile(aes(fill = val), color = 'grey30', linewidth = .75, show.legend = FALSE) +
    scale_fill_gradientn(colors = c('#ffffee', 'orange', 'darkred'), limits = c(0, 1)) +
    coord_equal() +
    theme_void()
  
  print(p)
  
  ggsave(here('rasts_raw', sprintf('rast_%s.png', l)), height = 3, width = 3, dpi = 300)
}


```

## Now, for each species, calc a total impact layer

```{r}
spp_vs <- list(spp1 = c(str1 = 0.2, str2 = 0.8, str3 = 1.0),
               spp2 = c(str1 = 0.6, str2 = 0.2, str3 = 0.2),
               spp3 = c(str1 = 1.0, str2 = 0.1, str3 = 0.1),
               spp4 = c(str1 = 1.0, str2 = 0.2, str3 = 0.1))

strs_df <- df_stack %>% filter(str_detect(layer, 'str')) %>% rename(intensity = val)
spp_df <- df_stack %>%
  rename(spp = layer, pres = val) %>%
  filter(str_detect(spp, 'spp'))
  
spp_impact_df <- spp_df %>%
  mutate(pres = ifelse(pres == 1, 1, NA)) %>%
  mutate(vuln = spp_vs[spp]) %>%
  unnest(vuln) %>%
  mutate(str = paste0('str', rep(1:3, length.out = n()))) %>%
  left_join(strs_df, by = c('x', 'y', 'str' = 'layer')) %>%
  group_by(spp, x, y) %>%
  summarize(impact = sum(pres * vuln * intensity))

chi_limits <- c(0, max(spp_impact_df$impact, na.rm = TRUE))

spp_vec <- spp_impact_df$spp %>% unique()
for(s in spp_vec) {
  ### s <- spp_vec[1]
  i_df <- spp_impact_df %>%
    filter(spp == s)
  
  p <- ggplot(i_df, aes(x, y)) +
    geom_tile(aes(fill = impact), color = 'grey30', 
              linewidth = .75, show.legend = FALSE) +
    scale_fill_viridis_c(na.value = 'grey90', limits = chi_limits)+
    coord_equal() +
    theme_void()
  
  print(p)
  
  ggsave(here('rasts_raw', sprintf('rast_impact_%s.png', s)), 
         height = 3, width = 3, dpi = 300)
}
```

and for species 1, calc individual impact layers
```{r}
spp_str_impact_df <- spp_df %>%
  filter(spp == 'spp1') %>%
  mutate(pres = ifelse(pres == 1, 1, NA)) %>%
  mutate(vuln = spp_vs['spp1']) %>%
  unnest(vuln) %>%
  mutate(str = paste0('str', rep(1:3, length.out = n()))) %>%
  left_join(strs_df, by = c('x', 'y', 'str' = 'layer')) %>%
  mutate(impact = (pres * vuln * intensity))

str_vec <- spp_str_impact_df$str %>% unique()
for(s in str_vec) {
  ### s <- str_vec[2]
  i_df <- spp_str_impact_df %>%
    filter(str == s)
  
  p <- ggplot(i_df, aes(x, y)) +
    geom_tile(aes(fill = impact), color = 'grey30', linewidth = .75, show.legend = FALSE) +
    scale_fill_viridis_c(na.value = 'grey90', limits = c(0, 1))+
    coord_equal() +
    theme_void()
  
  print(p)
  
  ggsave(here('rasts_raw', sprintf('rast_spp1_impact_%s.png', s)), 
         height = 3, width = 3, dpi = 300)
}
```

## Now, combine species and calc overall outs

### spp richness and impact

```{r}
chi_spp_df <- spp_impact_df %>%
  filter(!is.na(impact)) %>%
  group_by(x, y) %>%
  summarize(chi = mean(impact)) %>%
  ungroup() %>%
  complete(x, y)

ggplot(chi_spp_df, aes(x, y)) +
  geom_tile(aes(fill = chi), color = 'grey30', linewidth = .75, show.legend = FALSE) +
  scale_fill_viridis_c(na.value = 'grey90', limits = chi_limits) +
  coord_equal() +
  theme_void()

ggsave(here('rasts_raw', 'rast_spp_chi.png'), height = 3, width = 3, dpi = 300)

# spp_rich_df <- spp_df %>%
#   group_by(x, y) %>%
#   summarize(spp_rich = sum(pres))
# 
# ggplot(spp_rich_df, aes(x, y)) +
#   geom_tile(aes(fill = spp_rich), color = 'grey30', linewidth = .75, show.legend = FALSE) +
#   scale_fill_gradient(low = '#ecfeff', high = 'slateblue4', na.value = 'grey90')+
#   coord_equal() +
#   theme_void()
# 
# ggsave(here('rasts_raw', 'rast_spp_richness.png'), height = 3, width = 3, dpi = 300)

```

### Impact by FE

```{r}

chi_per_fe_df <- spp_impact_df %>%
  filter(!is.na(impact)) %>%
  mutate(fe = ifelse(spp == 'spp1', 1, 2)) %>%
  group_by(x, y, fe) %>%
  summarize(fe_mean = mean(impact), .groups = 'drop') %>%
  complete(x, y, fe)

chi_lims <- c(0, max(chi_per_fe_df$fe_mean, na.rm = TRUE))

for(f in unique(chi_per_fe_df$fe)) {
  ### f <- 1
  df <- chi_per_fe_df %>% 
    filter(fe == f)
  
  ggplot(chi_per_fe_df %>% filter(fe == f), aes(x, y)) +
    geom_tile(aes(fill = fe_mean), color = 'grey30', linewidth = .75, show.legend = FALSE) +
    scale_fill_viridis_c(na.value = 'grey90', limits = chi_lims)+
    coord_equal() +
    theme_void()

  ggsave(here('rasts_raw', sprintf('rast_per_fe_%s_chi.png', f)), 
         height = 3, width = 3, dpi = 300)

}
```

### Overall FE richness and impact

```{r}

chi_fe_df <- spp_impact_df %>%
  filter(!is.na(impact)) %>%
  mutate(fe = ifelse(spp == 'spp1', 1, 2)) %>%
  group_by(x, y, fe) %>%
  summarize(fe_mean = mean(impact),
            fv = .5^(n()-1)) %>%
  group_by(x, y) %>%
  summarize(chi = sum(fe_mean * fv) / sum(fv),
            fv = mean(fv))

ggplot(chi_fe_df, aes(x, y)) +
  geom_tile(aes(fill = chi), color = 'grey30', linewidth = .75, show.legend = FALSE) +
  scale_fill_viridis_c(na.value = 'grey90', limits = chi_limits) +
  coord_equal() +
  theme_void()

ggsave(here('rasts_raw', 'rast_fe_chi.png'), height = 3, width = 3, dpi = 300)
```

and diff raster

```{r}
fe_spp_diff <- left_join(chi_spp_df, chi_fe_df %>% 
                           rename(chi_fe = chi)) %>% 
  mutate(d = chi_fe - chi,
         d = ifelse(d > 0, d * .5, d))

pal <- hcl.colors(3, palette = 'Red-Green')

ggplot(fe_spp_diff, aes(x, y)) +
  geom_tile(aes(fill = d), color = 'grey30', linewidth = .75, show.legend = FALSE) +
  scale_fill_gradient2(high = pal[1], low = pal[3], mid = pal[2], 
                       midpoint = 0, limits = c(-.4, .4))+
  coord_equal() +
  theme_void()

ggsave(here('rasts_raw', 'rast_fe_spp_diff.png'), height = 3, width = 3, dpi = 300)

```

## Now, skew each image and save out

```{r}
raw_fs <- list.files(here('rasts_raw'), full.names = TRUE)

for(f in raw_fs) {
  ### f <- raw_fs[1]
  x <- image_read(f)
  
  y <- image_shear(x, geometry = '30x0') %>%
    image_trim() %>%
    image_resize(geometry = '100%x40%')
  image_write(y, here('rasts_xfm', basename(f)))

}
```

![](rasts_xfm/rast_fe_chi.png)
![](rasts_xfm/rast_spp_chi.png)
![](rasts_xfm/rast_fe_spp_diff.png)


